// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"
	"time"

	"github.com/artie-labs/transfer/lib/kafkalib"
	"github.com/confluentinc/confluent-kafka-go/kafka"
)

type FakeConsumer struct {
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
	}
	closeReturns struct {
		result1 error
	}
	closeReturnsOnCall map[int]struct {
		result1 error
	}
	CommitOffsetsStub        func([]kafka.TopicPartition) ([]kafka.TopicPartition, error)
	commitOffsetsMutex       sync.RWMutex
	commitOffsetsArgsForCall []struct {
		arg1 []kafka.TopicPartition
	}
	commitOffsetsReturns struct {
		result1 []kafka.TopicPartition
		result2 error
	}
	commitOffsetsReturnsOnCall map[int]struct {
		result1 []kafka.TopicPartition
		result2 error
	}
	ReadMessageStub        func(time.Duration) (*kafka.Message, error)
	readMessageMutex       sync.RWMutex
	readMessageArgsForCall []struct {
		arg1 time.Duration
	}
	readMessageReturns struct {
		result1 *kafka.Message
		result2 error
	}
	readMessageReturnsOnCall map[int]struct {
		result1 *kafka.Message
		result2 error
	}
	SubscribeTopicsStub        func([]string, kafka.RebalanceCb) error
	subscribeTopicsMutex       sync.RWMutex
	subscribeTopicsArgsForCall []struct {
		arg1 []string
		arg2 kafka.RebalanceCb
	}
	subscribeTopicsReturns struct {
		result1 error
	}
	subscribeTopicsReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeConsumer) Close() error {
	fake.closeMutex.Lock()
	ret, specificReturn := fake.closeReturnsOnCall[len(fake.closeArgsForCall)]
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
	}{})
	stub := fake.CloseStub
	fakeReturns := fake.closeReturns
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConsumer) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeConsumer) CloseCalls(stub func() error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = stub
}

func (fake *FakeConsumer) CloseReturns(result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeConsumer) CloseReturnsOnCall(i int, result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	if fake.closeReturnsOnCall == nil {
		fake.closeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.closeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeConsumer) CommitOffsets(arg1 []kafka.TopicPartition) ([]kafka.TopicPartition, error) {
	var arg1Copy []kafka.TopicPartition
	if arg1 != nil {
		arg1Copy = make([]kafka.TopicPartition, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.commitOffsetsMutex.Lock()
	ret, specificReturn := fake.commitOffsetsReturnsOnCall[len(fake.commitOffsetsArgsForCall)]
	fake.commitOffsetsArgsForCall = append(fake.commitOffsetsArgsForCall, struct {
		arg1 []kafka.TopicPartition
	}{arg1Copy})
	stub := fake.CommitOffsetsStub
	fakeReturns := fake.commitOffsetsReturns
	fake.recordInvocation("CommitOffsets", []interface{}{arg1Copy})
	fake.commitOffsetsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeConsumer) CommitOffsetsCallCount() int {
	fake.commitOffsetsMutex.RLock()
	defer fake.commitOffsetsMutex.RUnlock()
	return len(fake.commitOffsetsArgsForCall)
}

func (fake *FakeConsumer) CommitOffsetsCalls(stub func([]kafka.TopicPartition) ([]kafka.TopicPartition, error)) {
	fake.commitOffsetsMutex.Lock()
	defer fake.commitOffsetsMutex.Unlock()
	fake.CommitOffsetsStub = stub
}

func (fake *FakeConsumer) CommitOffsetsArgsForCall(i int) []kafka.TopicPartition {
	fake.commitOffsetsMutex.RLock()
	defer fake.commitOffsetsMutex.RUnlock()
	argsForCall := fake.commitOffsetsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeConsumer) CommitOffsetsReturns(result1 []kafka.TopicPartition, result2 error) {
	fake.commitOffsetsMutex.Lock()
	defer fake.commitOffsetsMutex.Unlock()
	fake.CommitOffsetsStub = nil
	fake.commitOffsetsReturns = struct {
		result1 []kafka.TopicPartition
		result2 error
	}{result1, result2}
}

func (fake *FakeConsumer) CommitOffsetsReturnsOnCall(i int, result1 []kafka.TopicPartition, result2 error) {
	fake.commitOffsetsMutex.Lock()
	defer fake.commitOffsetsMutex.Unlock()
	fake.CommitOffsetsStub = nil
	if fake.commitOffsetsReturnsOnCall == nil {
		fake.commitOffsetsReturnsOnCall = make(map[int]struct {
			result1 []kafka.TopicPartition
			result2 error
		})
	}
	fake.commitOffsetsReturnsOnCall[i] = struct {
		result1 []kafka.TopicPartition
		result2 error
	}{result1, result2}
}

func (fake *FakeConsumer) ReadMessage(arg1 time.Duration) (*kafka.Message, error) {
	fake.readMessageMutex.Lock()
	ret, specificReturn := fake.readMessageReturnsOnCall[len(fake.readMessageArgsForCall)]
	fake.readMessageArgsForCall = append(fake.readMessageArgsForCall, struct {
		arg1 time.Duration
	}{arg1})
	stub := fake.ReadMessageStub
	fakeReturns := fake.readMessageReturns
	fake.recordInvocation("ReadMessage", []interface{}{arg1})
	fake.readMessageMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeConsumer) ReadMessageCallCount() int {
	fake.readMessageMutex.RLock()
	defer fake.readMessageMutex.RUnlock()
	return len(fake.readMessageArgsForCall)
}

func (fake *FakeConsumer) ReadMessageCalls(stub func(time.Duration) (*kafka.Message, error)) {
	fake.readMessageMutex.Lock()
	defer fake.readMessageMutex.Unlock()
	fake.ReadMessageStub = stub
}

func (fake *FakeConsumer) ReadMessageArgsForCall(i int) time.Duration {
	fake.readMessageMutex.RLock()
	defer fake.readMessageMutex.RUnlock()
	argsForCall := fake.readMessageArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeConsumer) ReadMessageReturns(result1 *kafka.Message, result2 error) {
	fake.readMessageMutex.Lock()
	defer fake.readMessageMutex.Unlock()
	fake.ReadMessageStub = nil
	fake.readMessageReturns = struct {
		result1 *kafka.Message
		result2 error
	}{result1, result2}
}

func (fake *FakeConsumer) ReadMessageReturnsOnCall(i int, result1 *kafka.Message, result2 error) {
	fake.readMessageMutex.Lock()
	defer fake.readMessageMutex.Unlock()
	fake.ReadMessageStub = nil
	if fake.readMessageReturnsOnCall == nil {
		fake.readMessageReturnsOnCall = make(map[int]struct {
			result1 *kafka.Message
			result2 error
		})
	}
	fake.readMessageReturnsOnCall[i] = struct {
		result1 *kafka.Message
		result2 error
	}{result1, result2}
}

func (fake *FakeConsumer) SubscribeTopics(arg1 []string, arg2 kafka.RebalanceCb) error {
	var arg1Copy []string
	if arg1 != nil {
		arg1Copy = make([]string, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.subscribeTopicsMutex.Lock()
	ret, specificReturn := fake.subscribeTopicsReturnsOnCall[len(fake.subscribeTopicsArgsForCall)]
	fake.subscribeTopicsArgsForCall = append(fake.subscribeTopicsArgsForCall, struct {
		arg1 []string
		arg2 kafka.RebalanceCb
	}{arg1Copy, arg2})
	stub := fake.SubscribeTopicsStub
	fakeReturns := fake.subscribeTopicsReturns
	fake.recordInvocation("SubscribeTopics", []interface{}{arg1Copy, arg2})
	fake.subscribeTopicsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConsumer) SubscribeTopicsCallCount() int {
	fake.subscribeTopicsMutex.RLock()
	defer fake.subscribeTopicsMutex.RUnlock()
	return len(fake.subscribeTopicsArgsForCall)
}

func (fake *FakeConsumer) SubscribeTopicsCalls(stub func([]string, kafka.RebalanceCb) error) {
	fake.subscribeTopicsMutex.Lock()
	defer fake.subscribeTopicsMutex.Unlock()
	fake.SubscribeTopicsStub = stub
}

func (fake *FakeConsumer) SubscribeTopicsArgsForCall(i int) ([]string, kafka.RebalanceCb) {
	fake.subscribeTopicsMutex.RLock()
	defer fake.subscribeTopicsMutex.RUnlock()
	argsForCall := fake.subscribeTopicsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeConsumer) SubscribeTopicsReturns(result1 error) {
	fake.subscribeTopicsMutex.Lock()
	defer fake.subscribeTopicsMutex.Unlock()
	fake.SubscribeTopicsStub = nil
	fake.subscribeTopicsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeConsumer) SubscribeTopicsReturnsOnCall(i int, result1 error) {
	fake.subscribeTopicsMutex.Lock()
	defer fake.subscribeTopicsMutex.Unlock()
	fake.SubscribeTopicsStub = nil
	if fake.subscribeTopicsReturnsOnCall == nil {
		fake.subscribeTopicsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.subscribeTopicsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeConsumer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.commitOffsetsMutex.RLock()
	defer fake.commitOffsetsMutex.RUnlock()
	fake.readMessageMutex.RLock()
	defer fake.readMessageMutex.RUnlock()
	fake.subscribeTopicsMutex.RLock()
	defer fake.subscribeTopicsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeConsumer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ kafkalib.Consumer = new(FakeConsumer)
