// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/artie-labs/transfer/lib/kafkalib"
	kafka "github.com/segmentio/kafka-go"
)

type FakeConsumer struct {
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
	}
	closeReturns struct {
		result1 error
	}
	closeReturnsOnCall map[int]struct {
		result1 error
	}
	CommitMessagesStub        func(context.Context, ...kafka.Message) error
	commitMessagesMutex       sync.RWMutex
	commitMessagesArgsForCall []struct {
		arg1 context.Context
		arg2 []kafka.Message
	}
	commitMessagesReturns struct {
		result1 error
	}
	commitMessagesReturnsOnCall map[int]struct {
		result1 error
	}
	ReadMessageStub        func(context.Context) (kafka.Message, error)
	readMessageMutex       sync.RWMutex
	readMessageArgsForCall []struct {
		arg1 context.Context
	}
	readMessageReturns struct {
		result1 kafka.Message
		result2 error
	}
	readMessageReturnsOnCall map[int]struct {
		result1 kafka.Message
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeConsumer) Close() error {
	fake.closeMutex.Lock()
	ret, specificReturn := fake.closeReturnsOnCall[len(fake.closeArgsForCall)]
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
	}{})
	stub := fake.CloseStub
	fakeReturns := fake.closeReturns
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConsumer) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeConsumer) CloseCalls(stub func() error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = stub
}

func (fake *FakeConsumer) CloseReturns(result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeConsumer) CloseReturnsOnCall(i int, result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	if fake.closeReturnsOnCall == nil {
		fake.closeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.closeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeConsumer) CommitMessages(arg1 context.Context, arg2 ...kafka.Message) error {
	fake.commitMessagesMutex.Lock()
	ret, specificReturn := fake.commitMessagesReturnsOnCall[len(fake.commitMessagesArgsForCall)]
	fake.commitMessagesArgsForCall = append(fake.commitMessagesArgsForCall, struct {
		arg1 context.Context
		arg2 []kafka.Message
	}{arg1, arg2})
	stub := fake.CommitMessagesStub
	fakeReturns := fake.commitMessagesReturns
	fake.recordInvocation("CommitMessages", []interface{}{arg1, arg2})
	fake.commitMessagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConsumer) CommitMessagesCallCount() int {
	fake.commitMessagesMutex.RLock()
	defer fake.commitMessagesMutex.RUnlock()
	return len(fake.commitMessagesArgsForCall)
}

func (fake *FakeConsumer) CommitMessagesCalls(stub func(context.Context, ...kafka.Message) error) {
	fake.commitMessagesMutex.Lock()
	defer fake.commitMessagesMutex.Unlock()
	fake.CommitMessagesStub = stub
}

func (fake *FakeConsumer) CommitMessagesArgsForCall(i int) (context.Context, []kafka.Message) {
	fake.commitMessagesMutex.RLock()
	defer fake.commitMessagesMutex.RUnlock()
	argsForCall := fake.commitMessagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeConsumer) CommitMessagesReturns(result1 error) {
	fake.commitMessagesMutex.Lock()
	defer fake.commitMessagesMutex.Unlock()
	fake.CommitMessagesStub = nil
	fake.commitMessagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeConsumer) CommitMessagesReturnsOnCall(i int, result1 error) {
	fake.commitMessagesMutex.Lock()
	defer fake.commitMessagesMutex.Unlock()
	fake.CommitMessagesStub = nil
	if fake.commitMessagesReturnsOnCall == nil {
		fake.commitMessagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.commitMessagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeConsumer) ReadMessage(arg1 context.Context) (kafka.Message, error) {
	fake.readMessageMutex.Lock()
	ret, specificReturn := fake.readMessageReturnsOnCall[len(fake.readMessageArgsForCall)]
	fake.readMessageArgsForCall = append(fake.readMessageArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.ReadMessageStub
	fakeReturns := fake.readMessageReturns
	fake.recordInvocation("ReadMessage", []interface{}{arg1})
	fake.readMessageMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeConsumer) ReadMessageCallCount() int {
	fake.readMessageMutex.RLock()
	defer fake.readMessageMutex.RUnlock()
	return len(fake.readMessageArgsForCall)
}

func (fake *FakeConsumer) ReadMessageCalls(stub func(context.Context) (kafka.Message, error)) {
	fake.readMessageMutex.Lock()
	defer fake.readMessageMutex.Unlock()
	fake.ReadMessageStub = stub
}

func (fake *FakeConsumer) ReadMessageArgsForCall(i int) context.Context {
	fake.readMessageMutex.RLock()
	defer fake.readMessageMutex.RUnlock()
	argsForCall := fake.readMessageArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeConsumer) ReadMessageReturns(result1 kafka.Message, result2 error) {
	fake.readMessageMutex.Lock()
	defer fake.readMessageMutex.Unlock()
	fake.ReadMessageStub = nil
	fake.readMessageReturns = struct {
		result1 kafka.Message
		result2 error
	}{result1, result2}
}

func (fake *FakeConsumer) ReadMessageReturnsOnCall(i int, result1 kafka.Message, result2 error) {
	fake.readMessageMutex.Lock()
	defer fake.readMessageMutex.Unlock()
	fake.ReadMessageStub = nil
	if fake.readMessageReturnsOnCall == nil {
		fake.readMessageReturnsOnCall = make(map[int]struct {
			result1 kafka.Message
			result2 error
		})
	}
	fake.readMessageReturnsOnCall[i] = struct {
		result1 kafka.Message
		result2 error
	}{result1, result2}
}

func (fake *FakeConsumer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.commitMessagesMutex.RLock()
	defer fake.commitMessagesMutex.RUnlock()
	fake.readMessageMutex.RLock()
	defer fake.readMessageMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeConsumer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ kafkalib.Consumer = new(FakeConsumer)
